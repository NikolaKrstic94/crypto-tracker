/**
 * CoinCap API 2.0
 * v2.0.1  CoinCap is a useful tool for real-time pricing and market activity for over 1,000 cryptocurrencies. By collecting exchange data from thousands of markets, we are able to offer transparent and accurate data on asset price and availability.   Our API will offer insight into exactly which exchanges and markets contribute to our pricing.   For all endpoints, a single page offers 100 responses by default and supports up to 2,000 responses per page upon requests.   ## Status Codes and Error Response  The following are error codes you may encounter as you use CoinCap.   Note: all CoinCap requests are GET requests  200: Successful - this is the data you were looking for  400-417: Client error - these will often be accompanied by some response in the body that will give the user direction on how to change the request. Here are some examples of 400: Bad Request responses: - 'use valid interval': m1, m5, m15, m30, h1, h2, h6, h12, d1': Interval must be m1 for one minute, m5 for 5 minute, m15 for 15 minute, m30 for 30 minute, h1 for one hour, h2 for 2 hour, h6 for 6 hour, h12 for 12 hour, and d1 for one day - 'query requires end': If user includes a start query, there must be an end query - 'query requires start': If user includes an end query, there must be a start query - 'limit exceeds 2000': bad request, exceeds max limit - 'missing exchange': This endpoint requires user to specify exchange in parameters - 'missing interval': This endpoint requires user to specify interval (ex: m1, m15, d1, etc) in parameters - 'missing base': This endpoint requires user to specify base asset (ex: BTC) - 'missing quote': This endpoint requires user to specify quote asset (ex: USD)  500-505: Server Error - Looks like something went down on our end. Try back again soon!  For a full list of HTTP Status Code definitions, please visit [here](https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).  ## Headers  We encourage clients to use compression via the `Accept-Encoding` header.  `Accept-Encoding: gzip` or `Accept-Encoding: deflate`  If you have an API Key use it as a `Bearer Token`.   Programmatically, set the header field `Authorization=Bearer XXXX`  ## Limits  #### Free Tier (No API Key)  - 200 requests per minute - 11 years historical data  #### Free Tier (API Key)  - 500 requests per minute - 11 years historical data  ## Request API Key  Click [here](https://coincap.io/api-key) to request your API key
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { InlineResponse200 } from '../model/inlineResponse200';
import { InlineResponse2001 } from '../model/inlineResponse2001';
import { InlineResponse2002 } from '../model/inlineResponse2002';
import { InlineResponse2003 } from '../model/inlineResponse2003';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AssetsService {

    protected basePath = '{{host}}';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * /assets
     * ### Request  | Key       | Required | Value   | Description | |-----------|----------|---------|-------------| | search    | optional | bitcoin | search by asset id (bitcoin) or symbol (BTC) | | ids   | optional | bitcoin | query with multiple ids&#x3D;bitcoin,ethereum,monero| | limit     | optional | 5    | max limit of 2000      | | offset    | optional | 1    | offset         |    ### Response  | Key         | Description | |-------------------|-------------| | id    | unique identifier for asset | | rank    | rank is in ascending order - this number is directly associated with the marketcap whereas the highest marketcap receives rank 1 | | symbol   | most common symbol used to identify this asset on an exchange | | name    | proper name for asset | | supply            | available supply for trading | | maxSupply         | total quantity of asset issued | | marketCapUsd      | supply x price | | volumeUsd24Hr     | quantity of trading volume represented in USD over the last 24 hours | | priceUsd          | volume-weighted price based on real-time market data, translated to USD | | changePercent24Hr | the direction and value change in the last 24 hours | | vwap24Hr          | Volume Weighted Average Price in the last 24 hours  |
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public assets(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200>;
    public assets(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse200>>;
    public assets(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse200>>;
    public assets(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<InlineResponse200>('get',`${this.basePath}/v2/assets`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * /assets/{{id}}
     * ### Request  | Key       | Required | Value   | Description | |-----------|----------|---------|-------------| | id        | required | bitcoin |  asset id   |  ### Response  | Key         | Description | |-------------------|-------------| | id    | unique identifier for asset | | rank    | rank is in ascending order - this number is directly associated with the marketcap whereas the highest marketcap receives rank 1 | | symbol   |  most common symbol used to identify this asset on an exchange | | name    | proper name for asset | | supply   | available supply for trading | | maxSupply   | total quantity of asset issued | | marketCapUsd  | supply x price | | volumeUsd24Hr  |  quantity of trading volume represented in USD over the last 24 hours | | priceUsd   | volume-weighted price based on real-time market data, translated to USD | | changePercent24Hr | the direction and value change in the last 24 hours | | vwap24Hr   |  Volume Weighted Average Price in the last 24 hours |
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public assetsId(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2001>;
    public assetsId(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2001>>;
    public assetsId(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2001>>;
    public assetsId(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<InlineResponse2001>('get',`${this.basePath}/v2/assets/bitcoin`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * /assets/{{id}}/history
     * ### Request  | Key       | Required | Value    | Description                 | |-----------|----------|----------------|----------------------------------------------------------------------------| | id        | required | bitcoin  | asset id               | | interval  | required | m1, m5, m15, m30, h1, h2, h6, h12, d1| point-in-time interval. minute and hour intervals represent price at that time, the day interval represents average of 24 hour periods (timezone: UTC) | | start  &amp; end  | optional  | 1528470720000  | UNIX time in milliseconds. omitting will return the most recent asset history. If start is supplied, end is required and vice versa    |  ### Response  | Key       | Description | |-----------|-------------| | priceUsd  |  volume-weighted price based on real-time market data, translated to USD | | time      | timestamp in UNIX in milliseconds |
     * @param interval 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public assetsIdHistory(interval?: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2002>;
    public assetsIdHistory(interval?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2002>>;
    public assetsIdHistory(interval?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2002>>;
    public assetsIdHistory(interval?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (interval !== undefined && interval !== null) {
            queryParameters = queryParameters.set('interval', <any>interval);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<InlineResponse2002>('get',`${this.basePath}/v2/assets/bitcoin/history`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * /assets/{{id}}/markets
     * ### Request  | Key       | Required | Value    | Description   | |-----------|----------|----------------|-----------------------| | id        | required | bitcoin  | asset id | | limit     | optional | 5    | max limit of 2000   | | offset    | optional | 1    | offset      |  ### Response  | Key        | Description | |------------|-------------| | exchangeId | unique identifier for exchange | | baseId     | unique identifier for this asset, base is asset purchased | | quoteId    | unique identifier for this asset, quote is asset used to purchase based| | baseSymbol | most common symbol used to identify asset, base is asset purchased | | quoteSymbol| most common symbol used to identify asset, quote is asset used to purchase base | | volumeUsd24Hr | volume transacted on this market in last 24 hours | | priceUsd   | the amount of quote asset traded for one unit of base asset | | volumePercent | percent of quote asset volume |  
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public assetsIdMarkets(observe?: 'body', reportProgress?: boolean): Observable<InlineResponse2003>;
    public assetsIdMarkets(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse2003>>;
    public assetsIdMarkets(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse2003>>;
    public assetsIdMarkets(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'text/plain'
        ];

        return this.httpClient.request<InlineResponse2003>('get',`${this.basePath}/v2/assets/bitcoin/markets`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
